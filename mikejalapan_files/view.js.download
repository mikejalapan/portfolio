/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/utils/toggle-expanded.js":
/*!**********************************************!*\
  !*** ./src/scripts/utils/toggle-expanded.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "applyToggleExpanded": () => (/* binding */ applyToggleExpanded),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "toggleExpanded": () => (/* binding */ toggleExpanded)
/* harmony export */ });
/**
 * Toggle area-expanded attributes via aria-controls.
 */

const controlled = [];

/**
 * Link button with controlled element via aria-controls attribute.
 *
 * When pressed, the button will toggle the aria-expanded attribute on both the button and the controlled element.
 *
 * @param {Node} button A button element with an aria-controls attribute.
 * @param {object} options Options for the toggle functionality.
 * @param {boolean} options.clickOutsideClose Whether to close the target element when clicking outside. Default true.
 */
const toggleExpanded = (target, {
  clickOutsideClose = true,
  clickOutsideTarget,
  bodyClass
}) => {
  const targetId = target.id;
  if (!targetId) {
    console.warn('Target element must have an id attribute:', target);
    return;
  }
  clickOutsideTarget = clickOutsideTarget || target;
  bodyClass = bodyClass || targetId;
  const buttons = document.querySelectorAll('[aria-controls="' + targetId + '"]');
  if (buttons.lenth === 0) {
    console.warn('No buttons found with aria-controls="' + targetId + '".');
    return;
  }

  // Only set event listeners once per target.
  if (controlled.includes(target)) {
    return;
  }
  controlled.push(target);
  const startExpanded = target.getAttribute('aria-expanded') === 'true' ? 'true' : 'false';
  target.setAttribute('aria-expanded', startExpanded);
  buttons.forEach(button => button.setAttribute('aria-expanded', startExpanded));
  document.body.classList.add(`${bodyClass}-${startExpanded === 'true' ? 'open' : 'closed'}`);
  const listener = event => {
    // Whether a toggle button was clicked.
    let buttonClick = false;
    for (let i = 0; i < buttons.length; i++) {
      if (buttons.item(i).contains(event.target)) {
        buttonClick = true;
        break;
      }
    }

    // If NOT allowing for click outside to close the target, don't continue if the click was outside the target.
    if (!clickOutsideClose && !buttonClick) {
      return;
    }

    // If click is inside the menu and not a toggle button, don't continue.
    if (clickOutsideTarget.contains(event.target) && !buttonClick) {
      return;
    }

    // Check if target is currently expanded.
    const expanded = target.getAttribute('aria-expanded') === 'true';

    // If not expanded, only the button should expand the target.
    if (!expanded && !buttonClick) {
      return;
    }
    const newExpanded = target.getAttribute('aria-expanded') === 'true' ? 'false' : 'true';
    target.setAttribute('aria-expanded', newExpanded);
    buttons.forEach(button => button.setAttribute('aria-expanded', newExpanded));
    document.body.classList.remove(`${bodyClass}-${newExpanded === 'true' ? 'closed' : 'open'}`);
    document.body.classList.add(`${bodyClass}-${newExpanded === 'true' ? 'open' : 'closed'}`);
  };

  // Toggle the aria-expanded value each time the button or outside the target is clicked.
  document.addEventListener('click', listener);

  // Return a function to remove the event listener.
  return () => {
    document.removeEventListener('click', listener);
  };
};

/**
 * Apply toggleExpanded to all queried elements.
 *
 * @param {string} targetID The id attribute for all targets to apply the expanded toggle functionality to.
 * @param {object} options Options for the toggle functionality. @see {@link toggleExpanded} for available options.
 */
const applyToggleExpanded = (targetID = '#main-navigation', options = {}) => {
  const target = document.getElementById(targetID);
  return toggleExpanded(target, options);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (applyToggleExpanded);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**************************************!*\
  !*** ./src/blocks/pausemenu/view.js ***!
  \**************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _scripts_utils_toggle_expanded__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../scripts/utils/toggle-expanded */ "./src/scripts/utils/toggle-expanded.js");
/**
 * Block: pausemenu, view.
 */



// Apply toggleExpanded to all pausemenu menus on document ready.
document.addEventListener('DOMContentLoaded', () => {
  const menus = document.querySelectorAll('.wp-block-boldlygo-pausemenu__menu');
  menus.forEach(menu => {
    // Element that, when clicked outside of, will close the menu.
    const content = menu.querySelector('.wp-block-boldlygo-pausemenu__menu-content');
    (0,_scripts_utils_toggle_expanded__WEBPACK_IMPORTED_MODULE_0__.toggleExpanded)(menu, {
      clickOutsideTarget: content
    });
  });
});
})();

/******/ })()
;
//# sourceMappingURL=view.js.map